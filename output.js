// Generated by psc-bundle 0.7.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };                                                
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (__dict_Eq_7) {
      return eq(__dict_Eq_7);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (__dict_BooleanAlgebra_13) {
      return conj(__dict_BooleanAlgebra_13);
  };
  var compose = function (dict) {
      return dict.compose;
  };                                                   
  var $less$less$less = function (__dict_Semigroupoid_14) {
      return compose(__dict_Semigroupoid_14);
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (__dict_Ord_17) {
      return function (a1) {
          return function (a2) {
              var _571 = compare(__dict_Ord_17)(a1)(a2);
              if (_571 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (__dict_Ord_18) {
      return function (a1) {
          return function (a2) {
              var _572 = compare(__dict_Ord_18)(a1)(a2);
              if (_572 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (__dict_Semigroup_27) {
      return append(__dict_Semigroup_27);
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["eqString"] = eqString;
  exports["ordString"] = ordString;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Prelude = PS["Prelude"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (__dict_Monoid_21) {
      return function (f) {
          return function (_225) {
              if (_225 instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(__dict_Monoid_21);
              };
              if (_225 instanceof Data_Maybe.Just) {
                  return f(_225.value0);
              };
              throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 103, column 1 - line 111, column 1: " + [ f.constructor.name, _225.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_224) {
              if (_224 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_224 instanceof Data_Maybe.Just) {
                  return f(z)(_224.value0);
              };
              throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, _224.constructor.name ]);
          };
      };
  }, function (f) {
      return function (z) {
          return function (_223) {
              if (_223 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (_223 instanceof Data_Maybe.Just) {
                  return f(_223.value0)(z);
              };
              throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 103, column 1 - line 111, column 1: " + [ f.constructor.name, z.constructor.name, _223.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (__dict_Foldable_35) {
      return function (__dict_Monoid_36) {
          return foldMap(__dict_Foldable_35)(__dict_Monoid_36)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var semigroupList = new Prelude.Semigroup(function (_448) {
      return function (ys) {
          if (_448 instanceof Nil) {
              return ys;
          };
          if (_448 instanceof Cons) {
              return new Cons(_448.value0, Prelude["<>"](semigroupList)(_448.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ _448.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy__426) {
              var acc = __copy_acc;
              var _426 = __copy__426;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_426 instanceof Nil) {
                      return acc_1;
                  };
                  if (_426 instanceof Cons) {
                      var __tco_acc = new Cons(_426.value0, acc);
                      var __tco__426 = _426.value1;
                      acc = __tco_acc;
                      _426 = __tco__426;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-lists/src/Data/List.purs line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, _426.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy__449) {
              return function (__copy_acc) {
                  var _449 = __copy__449;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (_449 instanceof Nil) {
                          return acc;
                      };
                      if (_449 instanceof Cons) {
                          var __tco__449 = _449.value1;
                          var __tco_acc = new Cons(f(_449.value0), acc);
                          _449 = __tco__449;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-lists/src/Data/List.purs line 731, column 1 - line 738, column 1: " + [ _449.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (__dict_Foldable_16) {
      return Data_Foldable.foldr(__dict_Foldable_16)(Cons.create)(Nil.value);
  };
  var toList = function (__dict_Foldable_17) {
      return fromFoldable(__dict_Foldable_17);
  };
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_18) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.append(__dict_Monoid_18["__superclass_Prelude.Semigroup_0"]())(acc))(f);
          })(Data_Monoid.mempty(__dict_Monoid_18));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__451) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _451 = __copy__451;
                  tco: while (true) {
                      var b_1 = b;
                      if (_451 instanceof Nil) {
                          return b_1;
                      };
                      if (_451 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_451.value0);
                          var __tco__451 = _451.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _451 = __tco__451;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _451.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_450) {
              if (_450 instanceof Nil) {
                  return b;
              };
              if (_450 instanceof Cons) {
                  return o(_450.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_450.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _450.constructor.name ]);
          };
      };
  });                                                      
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (_454) {
      return function (xs) {
          if (_454 instanceof Nil) {
              return Nil.value;
          };
          if (_454 instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_454.value0)(xs))(Prelude["<*>"](applyList)(_454.value1)(xs));
          };
          throw new Error("Failed pattern match: " + [ _454.constructor.name, xs.constructor.name ]);
      };
  });
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["toList"] = toList;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["fromFoldable"] = fromFoldable;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (__copy___dict_Ord_6) {
      return function (__copy_k) {
          return function (__copy__463) {
              var __dict_Ord_6 = __copy___dict_Ord_6;
              var k = __copy_k;
              var _463 = __copy__463;
              tco: while (true) {
                  if (_463 instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var k_1 = k;
                  if (_463 instanceof Two && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value1)) {
                      return new Data_Maybe.Just(_463.value2);
                  };
                  var k_1 = k;
                  if (_463 instanceof Two && Prelude["<"](__dict_Ord_6)(k_1)(_463.value1)) {
                      var __tco___dict_Ord_6 = __dict_Ord_6;
                      var __tco__463 = _463.value0;
                      __dict_Ord_6 = __tco___dict_Ord_6;
                      k = k_1;
                      _463 = __tco__463;
                      continue tco;
                  };
                  var k_1 = k;
                  if (_463 instanceof Two) {
                      var __tco___dict_Ord_6 = __dict_Ord_6;
                      var __tco__463 = _463.value3;
                      __dict_Ord_6 = __tco___dict_Ord_6;
                      k = k_1;
                      _463 = __tco__463;
                      continue tco;
                  };
                  var k_1 = k;
                  if (_463 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value1)) {
                      return new Data_Maybe.Just(_463.value2);
                  };
                  var k_1 = k;
                  if (_463 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value4)) {
                      return new Data_Maybe.Just(_463.value5);
                  };
                  var k_1 = k;
                  if (_463 instanceof Three && Prelude["<"](__dict_Ord_6)(k_1)(_463.value1)) {
                      var __tco___dict_Ord_6 = __dict_Ord_6;
                      var __tco__463 = _463.value0;
                      __dict_Ord_6 = __tco___dict_Ord_6;
                      k = k_1;
                      _463 = __tco__463;
                      continue tco;
                  };
                  var k_1 = k;
                  if (_463 instanceof Three && Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["<"](__dict_Ord_6)(_463.value1)(k_1))(Prelude["<="](__dict_Ord_6)(k_1)(_463.value4))) {
                      var __tco___dict_Ord_6 = __dict_Ord_6;
                      var __tco__463 = _463.value3;
                      __dict_Ord_6 = __tco___dict_Ord_6;
                      k = k_1;
                      _463 = __tco__463;
                      continue tco;
                  };
                  if (_463 instanceof Three) {
                      var __tco___dict_Ord_6 = __dict_Ord_6;
                      var __tco_k = k;
                      var __tco__463 = _463.value6;
                      __dict_Ord_6 = __tco___dict_Ord_6;
                      k = __tco_k;
                      _463 = __tco__463;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ k.constructor.name, _463.constructor.name ]);
              };
          };
      };
  };
  var keys = function (_467) {
      if (_467 instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (_467 instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(_467.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value1))(keys(_467.value3)));
      };
      if (_467 instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(_467.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value1))(Prelude["++"](Data_List.semigroupList)(keys(_467.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value4))(keys(_467.value6)))));
      };
      throw new Error("Failed pattern match: " + [ _467.constructor.name ]);
  }; 
  var fromZipper = function (__copy___dict_Ord_8) {
      return function (__copy__464) {
          return function (__copy__465) {
              var __dict_Ord_8 = __copy___dict_Ord_8;
              var _464 = __copy__464;
              var _465 = __copy__465;
              tco: while (true) {
                  if (_464 instanceof Data_List.Nil) {
                      return _465;
                  };
                  if (_464 instanceof Data_List.Cons && _464.value0 instanceof TwoLeft) {
                      var __tco___dict_Ord_8 = __dict_Ord_8;
                      var __tco__464 = _464.value1;
                      var __tco__465 = new Two(_465, _464.value0.value0, _464.value0.value1, _464.value0.value2);
                      __dict_Ord_8 = __tco___dict_Ord_8;
                      _464 = __tco__464;
                      _465 = __tco__465;
                      continue tco;
                  };
                  if (_464 instanceof Data_List.Cons && _464.value0 instanceof TwoRight) {
                      var __tco___dict_Ord_8 = __dict_Ord_8;
                      var __tco__464 = _464.value1;
                      var __tco__465 = new Two(_464.value0.value0, _464.value0.value1, _464.value0.value2, _465);
                      __dict_Ord_8 = __tco___dict_Ord_8;
                      _464 = __tco__464;
                      _465 = __tco__465;
                      continue tco;
                  };
                  if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeLeft) {
                      var __tco___dict_Ord_8 = __dict_Ord_8;
                      var __tco__464 = _464.value1;
                      var __tco__465 = new Three(_465, _464.value0.value0, _464.value0.value1, _464.value0.value2, _464.value0.value3, _464.value0.value4, _464.value0.value5);
                      __dict_Ord_8 = __tco___dict_Ord_8;
                      _464 = __tco__464;
                      _465 = __tco__465;
                      continue tco;
                  };
                  if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeMiddle) {
                      var __tco___dict_Ord_8 = __dict_Ord_8;
                      var __tco__464 = _464.value1;
                      var __tco__465 = new Three(_464.value0.value0, _464.value0.value1, _464.value0.value2, _465, _464.value0.value3, _464.value0.value4, _464.value0.value5);
                      __dict_Ord_8 = __tco___dict_Ord_8;
                      _464 = __tco__464;
                      _465 = __tco__465;
                      continue tco;
                  };
                  if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeRight) {
                      var __tco___dict_Ord_8 = __dict_Ord_8;
                      var __tco__464 = _464.value1;
                      var __tco__465 = new Three(_464.value0.value0, _464.value0.value1, _464.value0.value2, _464.value0.value3, _464.value0.value4, _464.value0.value5, _465);
                      __dict_Ord_8 = __tco___dict_Ord_8;
                      _464 = __tco__464;
                      _465 = __tco__465;
                      continue tco;
                  };
                  throw new Error("Failed pattern match: " + [ _464.constructor.name, _465.constructor.name ]);
              };
          };
      };
  };
  var insert = function (__dict_Ord_9) {
      var up = function (__copy___dict_Ord_10) {
          return function (__copy__472) {
              return function (__copy__473) {
                  var __dict_Ord_10 = __copy___dict_Ord_10;
                  var _472 = __copy__472;
                  var _473 = __copy__473;
                  tco: while (true) {
                      if (_472 instanceof Data_List.Nil) {
                          return new Two(_473.value0, _473.value1, _473.value2, _473.value3);
                      };
                      if (_472 instanceof Data_List.Cons && _472.value0 instanceof TwoLeft) {
                          return fromZipper(__dict_Ord_10)(_472.value1)(new Three(_473.value0, _473.value1, _473.value2, _473.value3, _472.value0.value0, _472.value0.value1, _472.value0.value2));
                      };
                      if (_472 instanceof Data_List.Cons && _472.value0 instanceof TwoRight) {
                          return fromZipper(__dict_Ord_10)(_472.value1)(new Three(_472.value0.value0, _472.value0.value1, _472.value0.value2, _473.value0, _473.value1, _473.value2, _473.value3));
                      };
                      if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeLeft) {
                          var __tco___dict_Ord_10 = __dict_Ord_10;
                          var __tco__472 = _472.value1;
                          var __tco__473 = new KickUp(new Two(_473.value0, _473.value1, _473.value2, _473.value3), _472.value0.value0, _472.value0.value1, new Two(_472.value0.value2, _472.value0.value3, _472.value0.value4, _472.value0.value5));
                          __dict_Ord_10 = __tco___dict_Ord_10;
                          _472 = __tco__472;
                          _473 = __tco__473;
                          continue tco;
                      };
                      if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeMiddle) {
                          var __tco___dict_Ord_10 = __dict_Ord_10;
                          var __tco__472 = _472.value1;
                          var __tco__473 = new KickUp(new Two(_472.value0.value0, _472.value0.value1, _472.value0.value2, _473.value0), _473.value1, _473.value2, new Two(_473.value3, _472.value0.value3, _472.value0.value4, _472.value0.value5));
                          __dict_Ord_10 = __tco___dict_Ord_10;
                          _472 = __tco__472;
                          _473 = __tco__473;
                          continue tco;
                      };
                      if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeRight) {
                          var __tco___dict_Ord_10 = __dict_Ord_10;
                          var __tco__472 = _472.value1;
                          var __tco__473 = new KickUp(new Two(_472.value0.value0, _472.value0.value1, _472.value0.value2, _472.value0.value3), _472.value0.value4, _472.value0.value5, new Two(_473.value0, _473.value1, _473.value2, _473.value3));
                          __dict_Ord_10 = __tco___dict_Ord_10;
                          _472 = __tco__472;
                          _473 = __tco__473;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-maps/src/Data/Map.purs line 147, column 1 - line 148, column 1: " + [ _472.constructor.name, _473.constructor.name ]);
                  };
              };
          };
      };
      var down = function (__copy___dict_Ord_11) {
          return function (__copy_ctx) {
              return function (__copy_k) {
                  return function (__copy_v) {
                      return function (__copy__471) {
                          var __dict_Ord_11 = __copy___dict_Ord_11;
                          var ctx = __copy_ctx;
                          var k = __copy_k;
                          var v = __copy_v;
                          var _471 = __copy__471;
                          tco: while (true) {
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Leaf) {
                                  return up(__dict_Ord_11)(ctx_1)(new KickUp(Leaf.value, k_1, v_1, Leaf.value));
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Two && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value1)) {
                                  return fromZipper(__dict_Ord_11)(ctx_1)(new Two(_471.value0, k_1, v_1, _471.value3));
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Two && Prelude["<"](__dict_Ord_11)(k_1)(_471.value1)) {
                                  var __tco___dict_Ord_11 = __dict_Ord_11;
                                  var __tco_ctx = new Data_List.Cons(new TwoLeft(_471.value1, _471.value2, _471.value3), ctx_1);
                                  var __tco__471 = _471.value0;
                                  __dict_Ord_11 = __tco___dict_Ord_11;
                                  ctx = __tco_ctx;
                                  k = k_1;
                                  v = v_1;
                                  _471 = __tco__471;
                                  continue tco;
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Two) {
                                  var __tco___dict_Ord_11 = __dict_Ord_11;
                                  var __tco_ctx = new Data_List.Cons(new TwoRight(_471.value0, _471.value1, _471.value2), ctx_1);
                                  var __tco__471 = _471.value3;
                                  __dict_Ord_11 = __tco___dict_Ord_11;
                                  ctx = __tco_ctx;
                                  k = k_1;
                                  v = v_1;
                                  _471 = __tco__471;
                                  continue tco;
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value1)) {
                                  return fromZipper(__dict_Ord_11)(ctx_1)(new Three(_471.value0, k_1, v_1, _471.value3, _471.value4, _471.value5, _471.value6));
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value4)) {
                                  return fromZipper(__dict_Ord_11)(ctx_1)(new Three(_471.value0, _471.value1, _471.value2, _471.value3, k_1, v_1, _471.value6));
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Three && Prelude["<"](__dict_Ord_11)(k_1)(_471.value1)) {
                                  var __tco___dict_Ord_11 = __dict_Ord_11;
                                  var __tco_ctx = new Data_List.Cons(new ThreeLeft(_471.value1, _471.value2, _471.value3, _471.value4, _471.value5, _471.value6), ctx_1);
                                  var __tco__471 = _471.value0;
                                  __dict_Ord_11 = __tco___dict_Ord_11;
                                  ctx = __tco_ctx;
                                  k = k_1;
                                  v = v_1;
                                  _471 = __tco__471;
                                  continue tco;
                              };
                              var ctx_1 = ctx;
                              var k_1 = k;
                              var v_1 = v;
                              if (_471 instanceof Three && Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["<"](__dict_Ord_11)(_471.value1)(k_1))(Prelude["<="](__dict_Ord_11)(k_1)(_471.value4))) {
                                  var __tco___dict_Ord_11 = __dict_Ord_11;
                                  var __tco_ctx = new Data_List.Cons(new ThreeMiddle(_471.value0, _471.value1, _471.value2, _471.value4, _471.value5, _471.value6), ctx_1);
                                  var __tco__471 = _471.value3;
                                  __dict_Ord_11 = __tco___dict_Ord_11;
                                  ctx = __tco_ctx;
                                  k = k_1;
                                  v = v_1;
                                  _471 = __tco__471;
                                  continue tco;
                              };
                              if (_471 instanceof Three) {
                                  var __tco___dict_Ord_11 = __dict_Ord_11;
                                  var __tco_ctx = new Data_List.Cons(new ThreeRight(_471.value0, _471.value1, _471.value2, _471.value3, _471.value4, _471.value5), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco__471 = _471.value6;
                                  __dict_Ord_11 = __tco___dict_Ord_11;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  _471 = __tco__471;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-maps/src/Data/Map.purs line 147, column 1 - line 148, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, _471.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
      return down(__dict_Ord_9)(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromList = function (__dict_Ord_15) {
      return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
          return function (_459) {
              return insert(__dict_Ord_15)(_459.value0)(_459.value1)(m);
          };
      })(empty);
  };
  exports["keys"] = keys;
  exports["fromList"] = fromList;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;;
 
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  "use strict";

  // module Main

  exports.asBody = function(content){
      return function(){
          document.body.innerHTML = content;
      }
  }
 
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Data_Foldable = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var $tilde$greater = function (__dict_Functor_0) {
      return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
  };
  var $tilde = function (__dict_Apply_1) {
      return Prelude["<*>"](__dict_Apply_1);
  };
  var $less$tilde = function (__dict_Functor_2) {
      return Prelude["<$>"](__dict_Functor_2);
  };                                               
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["~"] = $tilde;
  exports["~>"] = $tilde$greater;
  exports["<~"] = $less$tilde;
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Signal = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Maybe = PS["Data.Maybe"];     
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (__dict_Attributable_0) {
      return $$with(__dict_Attributable_0);
  };
  var text = function (s) {
      return new Content(s, new Return(Prelude.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), [  ], new Return(Prelude.unit));
      };
  }; 
  var attribute = function (key) {
      return function (value) {
          return new Attribute([ new Attr(key, value) ]);
      };
  };
  var attributableMarkupM = new Attributable(function (_549) {
      return function (_550) {
          if (_549 instanceof Element) {
              return new Element(_549.value0, _549.value1, Prelude["<>"](Prelude.semigroupArray)(_549.value2)(_550.value0), _549.value3);
          };
          throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/bower_components/purescript-smolder/src/Text/Smolder/Markup.purs line 79, column 1 - line 82, column 1: " + [ _549.constructor.name, _550.constructor.name ]);
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["!"] = $bang;
  exports["attribute"] = attribute;
  exports["text"] = text;
  exports["parent"] = parent;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;;
 
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Prelude = PS["Prelude"];              
  var div = Text_Smolder_Markup.parent("div");
  exports["div"] = div;;
 
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Prelude = PS["Prelude"];                           
  var style = Text_Smolder_Markup.attribute("style");
  var id = Text_Smolder_Markup.attribute("id");
  exports["style"] = style;
  exports["id"] = id;;
 
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
      

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Signal = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Signal_Time = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  exports["mousePos"] = mousePos;
  exports["mouseButton"] = mouseButton;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Data_List = PS["Data.List"];
  var Prelude = PS["Prelude"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Foldable = PS["Data.Foldable"];     
  var Element = (function () {
      function Element(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Element(value0, value1, value2);
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (_552) {
          return new Data_Tuple.Tuple(_552.value0, _552.value1);
      };
      return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Map.fromList(Prelude.ordString))(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.map(Data_List.functorList)(toTuple))(Data_List.toList(Data_Foldable.foldableArray)));
  })();
  var renderMarkup = function (_551) {
      if (_551 instanceof Text_Smolder_Markup.Element && _551.value1 instanceof Data_Maybe.Just) {
          return Data_List[":"](new Element(_551.value0, renderAttrs(_551.value2), renderMarkup(_551.value1.value0)))(renderMarkup(_551.value3));
      };
      if (_551 instanceof Text_Smolder_Markup.Element && _551.value1 instanceof Data_Maybe.Nothing) {
          return Data_List[":"](new Element(_551.value0, renderAttrs(_551.value2), Data_List.Nil.value))(renderMarkup(_551.value3));
      };
      if (_551 instanceof Text_Smolder_Markup.Content) {
          return Data_List[":"](new Text(_551.value0))(renderMarkup(_551.value1));
      };
      if (_551 instanceof Text_Smolder_Markup.Return) {
          return Data_List.Nil.value;
      };
      throw new Error("Failed pattern match: " + [ _551.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;;
 
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Monoid = PS["Data.Monoid"];     
  var renderNode = function (_553) {
      if (_553 instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (_554) {
              if (_554 instanceof Data_List.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(_554)) + ("</" + (_553.value0 + ">")));
          };
          var showAttrs = function (a_1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
                      return "=\"" + (v + "\"");
                  })(Data_Map.lookup(Prelude.ordString)(k)(a_1)));
              };
              return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(pair)(Data_Map.keys(a_1)));
          };
          return "<" + (_553.value0 + (showAttrs(_553.value1) + showTail(_553.value2)));
      };
      if (_553 instanceof Text_Smolder_Renderer_Util.Text) {
          return _553.value0;
      };
      throw new Error("Failed pattern match: " + [ _553.constructor.name ]);
  };
  var render = Prelude["<<<"](Prelude.semigroupoidFn)(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString))(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.map(Data_List.functorList)(renderNode))(Text_Smolder_Renderer_Util.renderMarkup));
  exports["renderNode"] = renderNode;
  exports["render"] = render;;
 
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Main"];
  var Signal_Time = PS["Signal.Time"];
  var Data_Foldable = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Tuple = PS["Data.Tuple"];     
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var updatePlayer = function (_555) {
      return function (_556) {
          var updateColor = function (_559) {
              return function (_560) {
                  if (!_559) {
                      return _560;
                  };
                  if (_559 && _560 instanceof White) {
                      return Red.value;
                  };
                  if (_559 && _560 instanceof Red) {
                      return Blue.value;
                  };
                  if (_559 && _560 instanceof Blue) {
                      return Green.value;
                  };
                  if (_559 && _560 instanceof Green) {
                      return Cyan.value;
                  };
                  if (_559 && _560 instanceof Cyan) {
                      return White.value;
                  };
                  throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/src/Main.purs line 30, column 13 - line 31, column 13: " + [ _559.constructor.name, _560.constructor.name ]);
              };
          };
          var newColor = updateColor(_555.isClicked)(_556.color);
          return {
              x: _555.x, 
              y: _555.y, 
              color: newColor
          };
      };
  };
  var renderColor = function (_557) {
      if (_557 instanceof White) {
          return "#fff";
      };
      if (_557 instanceof Red) {
          return "#f00";
      };
      if (_557 instanceof Blue) {
          return "#00f";
      };
      if (_557 instanceof Green) {
          return "#0f0";
      };
      if (_557 instanceof Cyan) {
          return "#77f";
      };
      throw new Error("Failed pattern match at /Users/spencer/dev/scratch/purescript/square-demo/src/Main.purs line 39, column 1 - line 40, column 1: " + [ _557.constructor.name ]);
  };
  var renderPlayer = function (_558) {
      var currentStyle = Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude["++"](Prelude.semigroupString))("")([ " background-color: " + renderColor(_558.color) + "; ", " top: " + (Prelude.show(Prelude.showInt)(_558.y) + "px; "), " left: " + (Prelude.show(Prelude.showInt)(_558.x) + "px; "), " position: absolute; " ]);
      return Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["!"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.style(currentStyle)))(Text_Smolder_HTML_Attributes.id("playerOne"))(Text_Smolder_Markup.text(""));
  };
  var initialPlayerOne = {
      x: 0, 
      y: 0, 
      color: White.value
  };
  var frameRate = Signal_Time.every(60.0);
  var playerOne = function (mouseInputSignal) {
      return Signal.foldp(updatePlayer)(initialPlayerOne)(Signal.sampleOn(frameRate)(mouseInputSignal));
  };
  var main = (function () {
      var combineMouseSignals = function (pos) {
          return function (clicked) {
              return {
                  x: pos.x, 
                  y: pos.y, 
                  isClicked: clicked
              };
          };
      };
      return function __do() {
          var _27 = Signal_DOM.mousePos();
          var _26 = Signal_DOM.mouseButton(0)();
          return (function () {
              var mouseSignal = Signal["~"](Signal.applySignal)(Signal["<~"](Signal.functorSignal)(combineMouseSignals)(_27))(_26);
              return Signal.runSignal(Signal["~>"](Signal.functorSignal)(playerOne(mouseSignal))(Prelude[">>>"](Prelude.semigroupoidFn)(renderPlayer)(Prelude[">>>"](Prelude.semigroupoidFn)(Text_Smolder_Renderer_String.render)($foreign.asBody))));
          })()();
      };
  })();
  exports["White"] = White;
  exports["Red"] = Red;
  exports["Blue"] = Blue;
  exports["Green"] = Green;
  exports["Cyan"] = Cyan;
  exports["main"] = main;
  exports["playerOne"] = playerOne;
  exports["renderPlayer"] = renderPlayer;
  exports["renderColor"] = renderColor;
  exports["updatePlayer"] = updatePlayer;
  exports["initialPlayerOne"] = initialPlayerOne;
  exports["frameRate"] = frameRate;
  exports["asBody"] = $foreign.asBody;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
